#!/bin/bash
# ==================================================================
# FILE     musictogo.sh
# MACHINE  desktop (where the music library is)
# INFO     randomly chooses albums from library and copies them to 
#          mobile player
#
# DATE     19.05.2014
# OWNER    Bischofberger
# ==================================================================

# TODO: better player path handling


# paths
#LIBRARY="$HOME/Music"
#PLAYER1="/run/media/$(hostname)/E966-8E42"  # my sd card
#PLAYER2="/run/media/$(hostname)/"  # my sd card

# paths of testing environment
LIBRARY="$HOME/Music/mp3-snapshot"
PLAYER="/run/media/$(hostname)/syncstick"  # path after mounting

# temporary files
ALBUMLIST=albumlist.tmp
COPYLIST=copy_list.tmp

EXCHANGE_NMBR=99999  # some big number for the -n option


die() {
    echo -e "$0: Error: $1" >&2
    exit 1
}

clean() {
    local cleaning_list="$ALBUMLIST $COPYLIST"

    if [[ $1 == verbose ]] ; then
        echo -n "Cleaning up temporary files..."
        rm -f $cleaning_list
        echo -e "done.\n"
    else
        rm -f $cleaning_list
    fi
}


usage() {
    echo -e "usage: $0 [OPTION]\n\
Copies whole albums from your local music library to an external player/SD card.\n\

-d, --delete-logs     remove temporary files (such as albumlist and copylist)
-i, --include         include existing copylist, i.e. exclude albums on it.
                      musictogo must be run at least once before with the -k option
                      this option can be used to fill more than one SD card such that no doubles occur
-n, --number [NUMBR]  give a maximal number of albums to be exchanged through a random selection
    --help            shows this help
    --version         shows version number
"
    exit 0
}


# global vars set here:
# ---------------------
# $DELETE
# $INCLUDE
# $EXCHANGE_NMBR
# ---------------------
while [ -n "$1" ]; do
    case "$1" in
        "--help")
            usage
            ;;
        "--version")
            echo "musictogo Version 0.2"
            exit 0
            ;;
        "-d" | "--delete-logs")
            DELETE=1
            shift
            ;;
        "-i" | "--include")
            INCLUDE=1
            shift
            ;;
        "-n"|"--number")
            shift
            EXCHANGE_NMBR=$1
            if [[ ! $EXCHANGE_NMBR =~ ^[0-9]+$  || $EXCHANGE_NMBR == 0 ]] ; then
                die "Give a number > 1."
            fi
            shift
            ;;
        *)
            die "Unknown parameter '$1'.\nGet further information with the \"--help\" option."
            ;;
    esac
done


delete_all() {
    if [ -e $PLAYER ] ; then
        echo -n "Do you really want to delete ALL content on $PLAYER? (y/n) "
        read answer

        if [[ $answer == y ]] ; then
            rm -rf $PLAYER/* || die "Could not delete content."
            echo -e "Successfully deleted all content.\n"
        elif [[ $answer == n ]] ; then
            echo -e "No changes on $PLAYER.\n"
        else
            die "Invalid answer."
        fi
    else
        die "Please plug in player/card and rerun programme."
    fi
}


# global vars set here:
# ---------------------
# $FREE_SPACE
# ---------------------
check_free_space() {
    if [ -e $PLAYER ] ; then
        echo -n "Checking free space on $PLAYER..."

        FREE_SPACE=`df --block-size=1K $PLAYER | awk -F'[^0-9]*' 'NR==2 {print $5}'`
        local info_space=`expr $FREE_SPACE / 1024`

        echo "done."
        echo -e "You have approximately $info_space MB free space on $PLAYER.\n"
        echo -n "Would you like to proceed? (y/n) "
        read answer

        if [[ $answer == n ]]  ; then
            exit 1
        fi
        echo ""
    else
        die "Please plug in player/card and rerun programme."
    fi
}


# global vars set here:
# ---------------------
# $TOTAL_TRACK_NMBR
# ---------------------
list_albums() {
    echo -n "Collecting music library information..."

    rm -f $ALBUMLIST albumlist2.tmp
    touch $ALBUMLIST albumlist2.tmp  # some temporary helper file

    # create a new list of all albums in music library
    find . -type d -links 2 > albumlist2.tmp  # search for directories which have no more subdirectories
    awk '{ printf("%d\t%s\n", NR, $0) }' albumlist2.tmp > $ALBUMLIST  # add line numbers
    TOTAL_TRACK_NMBR=`wc -l < $ALBUMLIST`  # upper bound for random number generator in rand_choose()
    rm albumlist2.tmp

    echo -e "done.\n"
}


# global vars set here:
# ---------------------
# $NEXTALBUM
# $ALBUMSIZE
# ---------------------
rand_choose() {
    local floor=1
    local nextnumbr=`expr $RANDOM % $TOTAL_TRACK_NMBR`
    while [ $nextnumbr -lt $floor ] ; do
        nextnumbr=`expr $RANDOM % $TOTAL_TRACK_NMBR`
    done
    NEXTALBUM=`awk -F '\t' '$1 ~ /^'$nextnumbr'$/ {print $2}' $ALBUMLIST`  # no line numbers here anymore
    ALBUMSIZE=`du --block-size=1K -s "$NEXTALBUM" | cut -f1 | grep -o '[0-9]\+'`
}


# global vars set here:
# ---------------------
# $OLD_COPY_LIST_LENGTH
# ---------------------
# With -f option, take old COPYLIST (if existent) and list new albums 
# below the old (already copied last time) ones. In copy() we will skip 
# the old ones by using the $OLD_COPY_LIST_LENGTH variable from here.
create_copy_list() {
    echo -n "Randomly choosing albums..."

    local size_sum=0
    local again="yes"

    # "-i" option handling here...
    if [ -v INCLUDE ] && [ -e $COPYLIST ] ; then
        echo -e "\nTaking old copylist into computation"
        OLD_COPY_LIST_LENGTH=`wc -l < $COPYLIST`
    elif [ -v INCLUDE ] ; then
        echo ""
        clean
        die "No copylist found. Need to run musictogo -k once first before using the -i option.\n"
    else
        OLD_COPY_LIST_LENGTH=0
        rm -f $COPYLIST
        touch $COPYLIST
    fi

    local copy_list_length=$OLD_COPY_LIST_LENGTH  # for checking if copylist has same size as albumlist
    while (( copy_list_length <  TOTAL_TRACK_NMBR && size_sum < FREE_SPACE && EXCHANGE_NMBR > 0 )) ; do
        rand_choose

        while [[ $again == yes ]] ; do
            again="no"
            while read line ; do
                if [[ $line == $NEXTALBUM ]] ; then
                    rand_choose
                    again="yes"
                fi
            done < $COPYLIST
        done

        if (( (size_sum += ALBUMSIZE) < FREE_SPACE )) ; then
            &>>$COPYLIST echo $NEXTALBUM
            (( --EXCHANGE_NMBR ))
            (( ++copy_list_length ))
        else
            break
        fi
    done

    echo -e "done.\n"
}


copy() {
    echo "Data is being copied..."

    # variables for process bar
    local barlength=40
    local currentbar=0               # gets filled up with #'s
    local diffbar=$BARLENGTH         # gets filled up with -'s
    local total=`wc -l < $COPYLIST`  # total of albums to be copied
    local copied=0
    local percent=0

    echo -ne "[----------------------------------------] $PERCENT%\r"

    local linenmbr=0  # counter for skipping old copy list file entries

    while read line ; do
        # skip old copy list entries
        if (( ++linenmbr <= OLD_COPY_LIST_LENGTH )) ; then
            continue
        fi

        cp -r --parents "$line" $PLAYER/ || die "Could not copy all content."
        (( ++copied ))

        # print a process bar (uses bash arithmetics, not bourne shell compatible)
        percent=`echo "scale=2; 100.0 / $total * $copied" | bc`        # floating point...
        currentbar=`echo "scale=2; $barlength / 100 * $percent" | bc`
        percent=${percent/.*}  # round (to int): only for output
        currentbar=${currentbar/.*}  # for bar drawing
        ((diffbar = barlength - currentbar))
        echo -n "["
        while (( currentbar-- > 0 )) ; do
            echo -n "#"
        done
        while (( diffbar-- > 0 )) ; do
            echo -n "-"
        done
        echo -ne "] $percent%\r"

    done < $COPYLIST
    echo "[########################################] 100%"

    echo "done."
    echo "$copied album(s) have been copied."
}



### main script starts here ###
cd $LIBRARY || die "Directory $LIBRARY not available on this system."
delete_all
check_free_space
list_albums
create_copy_list
copy

# handle logfiles
if [ -v DELETE ] ; then
    clean
else
    echo "Logfiles can be found in $LIBRARY."
fi

echo -e "\nEnjoy!"

exit 0
