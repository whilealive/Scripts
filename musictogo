#!/bin/bash
# ==================================================================
# FILE     musictogo.sh
# MACHINE  desktop (where the music library is)
# INFO     randomly chooses albums from library and copies them to 
#          mobile player
#
# DATE     01.05.2014
# OWNER    Bischofberger
# ==================================================================

# TODO: distribute to more than SD card


# paths
#LIBRARY="$HOME/Music/mp3-snapshot"
LIBRARY="$HOME/Music"
#PLAYER="/run/media/$(hostname)/syncstick"  # path after mounting
PLAYER="/run/media/$(hostname)/E966-8E42"  # my sd card
EXCHANGE_NMBR=99999  # some big number for the -n option


die() {
    echo -e "$0: Error: $1" >&2
    exit 1
}


usage() {
    echo -e "usage: $0 [OPTION]\n\
Copies whole albums from your local music library to an external player/SD card.\n\

-k, --keep-logs       do not remove temporary files (such as albumlist and copylist)
-n, --number [NUMBR]  give a maximal number of albums to be exchanged through a random selection
    --help            shows this help
    --version         shows version number
"
    exit 0
}


# global vars set here:
# ---------------------
# $KEEP
# $EXCHANGE_NMBR
# ---------------------
while [ -n "$1" ]; do
    case "$1" in
        "--help")
            usage
            ;;
        "--version")
            echo "musictogo Version 0.1"
            exit 0
            ;;
        "-k" | "--keep-logs")
            KEEP=1
            shift
            ;;
        "-n"|"--number")
            shift
            EXCHANGE_NMBR=$1
            if [[ ! $EXCHANGE_NMBR =~ ^[0-9]+$  || $EXCHANGE_NMBR == 0 ]] ; then
                die "Give a number > 1."
            fi
            shift
            ;;
        *)
            die "Unknown parameter '$1'.\nGet further information with the \"--help\" option."
            ;;
    esac
done


delete_all() {
    if [ -e $PLAYER ] ; then
        echo -n "Do you really want to delete ALL content on $PLAYER? (y/n) "
        read answer

        if [[ $answer == y ]] ; then
            rm -rf $PLAYER/* || die "Could not delete content."
            echo -e "Successfully deleted all content.\n"
        elif [[ $answer == n ]] ; then
            echo -e "No changes on $PLAYER.\n"
        else
            die "Invalid answer."
        fi
    else
        die "Please plug in player/card and rerun programme."
    fi
}


# global vars set here:
# ---------------------
# $FREE_SPACE
# ---------------------
check_free_space() {
    if [ -e $PLAYER ] ; then
        echo -n "Checking free space on $PLAYER..."

        FREE_SPACE=`df --block-size=1K $PLAYER | awk -F'[^0-9]*' 'NR==2 {print $5}'`
        local info_space=`expr $FREE_SPACE / 1024`

        echo "done."
        echo -e "You have approximately $info_space MB free space on $PLAYER.\n"
        echo -n "Would you like to proceed? (y/n) "
        read answer

        if [[ $answer == n ]]  ; then
            exit 1
        fi
        echo ""
    else
        die "Please plug in player/card and rerun programme."
    fi
}


# global vars set here:
# ---------------------
# $TOTAL_TRACK_NMBR
# ---------------------
list_albums() {
    if [ -e albumlist.tmp ] ; then
        mv albumlist.tmp albumlist_old.tmp
    fi

    echo -n "Collecting music library information..."

    touch albumlist.tmp albumlist2.tmp
    find . -type d -links 2 > albumlist2.tmp  # search for directories which have no more subdirectories
    awk '{ printf("%d\t%s\n", NR, $0) }' albumlist2.tmp > albumlist.tmp  # add line numbers
    TOTAL_TRACK_NMBR=`wc -l < albumlist.tmp`  # upper bound for random number generator in rand_choose()
    rm albumlist2.tmp

    echo -e "done.\n"
}


# global vars set here:
# ---------------------
# $NEXTNUMBR
# $NEXTALBUM
# $ALBUMSIZE
# ---------------------
rand_choose() {
    local floor=1
    NEXTNUMBR=`expr $RANDOM % $TOTAL_TRACK_NMBR`
    while [ $NEXTNUMBR -lt $floor ] ; do
        NEXTNUMBR=`expr $RANDOM % $TOTAL_TRACK_NMBR`
    done
    NEXTALBUM=`awk -F '\t' '$1 ~ /^'$NEXTNUMBR'$/ {print $2}' albumlist.tmp`
    ALBUMSIZE=`du --block-size=1K -s "$NEXTALBUM" | cut -f1 | grep -o '[0-9]\+'`
}


create_copy_list() {
    if [ -e copy_list.tmp ] ; then
        mv copy_list.tmp copy_list_old.tmp
    fi

    echo -n "Randomly choosing albums..."

    local size_sum=0
    local again="yes"
    local chosen[0]=0  # list of already chosen numbers

    touch copy_list.tmp
    while (( size_sum < FREE_SPACE && EXCHANGE_NMBR > 0 )) ; do
        rand_choose
        while [[ $again == yes ]] ; do
            again="no"
            for i in ${chosen[@]} ; do
                if (( NEXTNUMBR == i )) ; then  # random number appears twice
                    rand_choose
                    again="yes"
                fi
            done
        done
        chosen=(${chosen[@]} $NEXTNUMBR)
        if (( (size_sum += ALBUMSIZE) < FREE_SPACE )) ; then
            &>>copy_list.tmp echo $NEXTALBUM
            (( --EXCHANGE_NMBR ))
        else
            break
        fi
    done

    echo -e "done.\n"
}


copy() {
    echo "Data is being copied..."

    # variables for process bar
    local barlength=40
    local currentbar=0        # gets filled up with #'s
    local diffbar=$BARLENGTH  # gets filled up with -'s
    local total=`wc -l < copy_list.tmp`  # total of albums to be copied
    local copied=0
    local percent=0

    echo -ne "[----------------------------------------] $PERCENT%\r"

    while read line ; do
        cp -r --parents "$line" $PLAYER/ || die "Could not copy all content."
        ((copied++))

        # print a process bar (uses bash arithmetics, not bourne shell compatible)
        percent=`echo "scale=2; 100.0 / $total * $copied" | bc`        # floating point...
        currentbar=`echo "scale=2; $barlength / 100 * $percent" | bc`
        percent=${percent/.*}  # round (to int): only for output
        currentbar=${currentbar/.*}  # for bar drawing
        ((diffbar = barlength - currentbar))
        echo -n "["
        while (( currentbar-- > 0 )) ; do
            echo -n "#"
        done
        while (( diffbar-- > 0 )) ; do
            echo -n "-"
        done
        echo -ne "] $percent%\r"

    done < copy_list.tmp
    echo "[########################################] 100%"

    echo "done."
    echo "$copied albums have been copied."
}
    


### main script starts here ###
cd $LIBRARY || die "Directory $LIBRARY not available on this system."
delete_all
check_free_space
list_albums
create_copy_list
copy

# handle logfiles
if [ ! -v KEEP ] ; then
    rm albumlist.tmp copy_list.tmp
else
    echo "Logfiles can be found in $LIBRARY."
fi

echo -e "\nEnjoy!"

exit 0
