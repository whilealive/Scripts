#!/bin/bash
# ==================================================================
# FILE     beamer
# MACHINE  all
# INFO     handles resolution in multi-monitor setup with dwm-type
#					 window managers when mirroring is involved
#          depends on: bc
#
# DATE     24.02.2023
# OWNER    Bischofberger
# ==================================================================


# set the following two according to your system
# ----------------------------------------------
INTERNAL="eDP-1"
EXTERNAL="HDMI-1"
# ----------------------------------------------


# global vars (will be set automatically later)
RES_INT_x="1"
RES_INT_y="1"
RES_INT_LIST=()
RES_EXT_x="1"
RES_EXT_y="1"
RES_EXT_LIST=()
COMMON_RES="1"
SCALING_FACTOR_xy=("1" "1")

die(){
	echo -e "$0: Error: $1" >&2
	exit 1
}

isValidRes(){
	if [[ $1 =~ ^[0-9]+$ ]] && (( $1 > 0 )); then
		return 0  # 0 = true
	else
		return 1  # 1 = false
	fi
}

usage(){
	echo -e "Usage: $0 [OPTION]

Handles dual-monitor setup with suckless dwm-like window managers.

If no argument is given, the \"--scale\" option will be performed.

-h, --help          Show this help.
-s, --scale         (Default) Down- or upscale one resolution from the other.
                    Lets the user choose an \"origin\" - this will be the
                    output that won't get scaled.
-a, --auto          Automatic setup ist being executed. In automatic mode
                    a COMMON RESOLUTION will be searched by default and 
                    activated on both screens. If there is no match one should
                    use scale-mode (default).\n
-m, --manual        Same as auto but manually enter desired external monitor 
                    resolution. Additional size checks give extra security in 
                    this mode.
-f, --force         Same as the \"-m\"-flag but no size checks here.
-d, --deactivate    Get out of dual-mode.
"
}

showAllResolutions(){
	xrandr
	echo ""
}

printResolution(){
	echo "${1}x${2}"
}

getCurrentInternalResolution(){
	local res=`xrandr | awk '/'\*'/ {print $1; exit}'`
  extractResolution RES_INT_x RES_INT_y $res
}

fillListOfInternalResolutions(){
	# awk:	1.) skip lines not beginning with a space and count them (in y)
	#						note that awk sets all variables to 0 by default, so we can
	#						just increment them whithout initialization
	#				2.) stop extracting numbers after three lines having no space at
	#						the beginning (see output of xrandr)
	local res=`xrandr | awk '!/'^\ '/ {++n;next} n<3 {print $1}'`
	RES_INT_LIST=($res)
}

fillListOfExternalResolutions(){
	local res=`xrandr | awk '/'^$EXTERNAL$'/ {m=1; next} m==1 && !/'^\ '/ {exit} m==1 && /'^\ '/ {print $1}'`
	RES_EXT_LIST=($res)
}

extractResolution(){
	eval "$1="$(echo $3 | awk -F "x" '{print $1}')""
	eval "$2="$(echo $3 | awk -F "x" '{print $2}')""
	if ! (isValidRes ${!1} && isValidRes ${!2}) ; then
		die "failed to extract resolution: ${!1} x ${!2}."
	fi
}

getHighestExternalResolutionFromList(){
  extractResolution RES_EXT_x RES_EXT_y ${RES_EXT_LIST[0]}
}

getHighestInternalResolutionFromList(){
  extractResolution RES_INT_x RES_INT_y ${RES_INT_LIST[0]}
}

# search for a match between internal and external list
# match will be saved in COMMON_RES
compareLists(){
	for resInt in "${RES_INT_LIST[@]}" ; do
		for resExt in "${RES_EXT_LIST[@]}" ; do
			if [[ "$resInt" == "$resExt" ]] ; then
				COMMON_RES=$resExt
				unset resInt resExt
				return 0  # 0 = true
			fi
		done
	done
  unset resInt resExt
	return 1  # 1 = false
}

xrandr_activateCommonResDualMode(){
	xrandr --output $EXTERNAL --auto --same-as $INTERNAL --mode `printResolution $RES_EXT_x $RES_EXT_y` \
    || die "xrandr failure"
	xrandr --output $INTERNAL --mode `printResolution $RES_EXT_x $RES_EXT_y` \
    || die "xrandr failure"
}

xrandr_deactivateDualMode(){
	read -p "Plug out external monitor and press [Enter]."
	xrandr --auto  # disable disconnected outputs
  xrandr -s 0    # reset internal screen to first available size
  xrandr --output $INTERNAL --scale 1x1  # rescale internal to 100%
}

readDesiredExternalResolution(){
	echo "Enter desired resolution of external: [{X}x{Y}]"
	read res  # local not possible due to "read"
  extractResolution RES_EXT_x RES_EXT_y $res
	unset res
}

isExternalInInternalList(){
	fillListOfInternalResolutions
	for res in "${RES_INT_LIST[@]}" ; do
    local resX resY
    extractResolution resX resY $res
		unset res
		if (( "$resX" == "$RES_EXT_x" && "$resY" == "$RES_EXT_y" )) ; then
			return 0  # 0 = true
		fi
	done
	return 1  # 1 = false
}

# arg1/arg2: base_x/base_y, arg3/arg4: target_x/target_y
computeScalingFactor(){
  eval "SCALING_FACTOR_xy[0]="$(echo "$1/$3" | bc -l)""
  eval "SCALING_FACTOR_xy[1]="$(echo "$2/$4" | bc -l)""
}

# manual but with some tests
setup_m(){
	showAllResolutions
	getCurrentInternalResolution
  readDesiredExternalResolution
  if isExternalInInternalList ; then
    xrandr_activateCommonResDualMode
  else
    die "No common screen resolution found. Try \"-f|-force\" or scale-mode (default)."
  fi
}

# no tests here
setup_force(){
	showAllResolutions
	getCurrentInternalResolution
	readDesiredExternalResolution
  xrandr_activateCommonResDualMode
}

# fully automatic
setup_a(){
  showAllResolutions
  fillListOfInternalResolutions
  fillListOfExternalResolutions
  if compareLists ; then
    echo "Common resolution found: $COMMON_RES"
    echo "Do you want to activate dual-mode with this resolution? [y|n]"
    read answer
    case "$answer" in
      "y")
        extractResolution RES_EXT_x RES_EXT_y $COMMON_RES
        xrandr_activateCommonResDualMode
        ;;
      *)
        die "unknown parameter $answer"
        ;;
    esac
  else
    die "No common resolution found. Try scale-mode (default)."
  fi
}

setup_scale(){
  showAllResolutions
  fillListOfInternalResolutions
  fillListOfExternalResolutions
  getHighestInternalResolutionFromList  # TODO: to be simplified... (get current resolution...)
  getHighestExternalResolutionFromList
  if (( "$RES_EXT_x" > "$RES_INT_x" || "$RES_EXT_y" > "$RES_INT_y" )) ; then
    echo "Scaling mode: External resolution ($(printResolution $RES_EXT_x $RES_EXT_y)) is HIGHER than internal ($(printResolution $RES_INT_x $RES_INT_y))."
  else
    echo "Scaling mode: External resolution ($(printResolution $RES_EXT_x $RES_EXT_y)) is LOWER than internal ($(printResolution $RES_INT_x $RES_INT_y))."
  fi
  echo -e "Choose origin:\n(1) External output\n(2) Internal output"
  read answer
  case "$answer" in
    "1")
      computeScalingFactor "$RES_EXT_x" "$RES_EXT_y" "$RES_INT_x" "$RES_INT_y" 
      xrandr --output $EXTERNAL --auto \
             --output $INTERNAL --same-as $EXTERNAL --mode `printResolution $RES_INT_x $RES_INT_y` \
             --scale "${SCALING_FACTOR_xy[0]}x${SCALING_FACTOR_xy[1]}" \
             || die "xrandr (scaling) failure"
      ;;
    "2")
      computeScalingFactor "$RES_INT_x" "$RES_INT_y" "$RES_EXT_x" "$RES_EXT_y"
      xrandr --output $INTERNAL --auto \
             --output $EXTERNAL --same-as $INTERNAL --mode `printResolution $RES_EXT_x $RES_EXT_y` \
             --scale "${SCALING_FACTOR_xy[0]}x${SCALING_FACTOR_xy[1]}" \
             || die "xrandr (scaling) failure"
      ;;
    *)
      die "unknown parameter $answer"
      ;;
  esac
}

# Main ------------------------------------------------

if [ -z "$1" ] ; then
  # if no argument is given do scaling
  setup_scale
  exit 0
fi

# handle options
case "$1" in
  "-s"|"--scale")
    setup_scale
    ;;
  "-a"|"--auto")
    setup_a
    ;;
  "-m"|"--manual")
    setup_m
    ;;
  "-f"|"--force")
    setup_force
    ;;
  "-h"|"--help")
    usage
    ;;
  "-d"|"--deactivate")
    xrandr_deactivateDualMode
    ;;
  *)
    echo "usage: $0 [-a|--auto] [-m|--manual] [-f|--force] [-d|--deactivate] [-h|--help]"
    die "unknown parameter '$1'"
    ;;
esac

