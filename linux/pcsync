#!/bin/bash
# ==================================================================
# FILE     pcsync
# MACHINE  all
# INFO     syncs stuff from external HD to local HD and back, 
#          using rsync
#          - external drive in ext4-format needs user rights after 
#            formatting: cd /run/media/, login as root with su, 
#            chown -R $(hostname):users $(hostname)
#          - If the external harddrive is named "transfer"
#            it will speed up things a bit.
#          - NOTE: It is assumed that all participating users are 
#            members of the group "users", otherwhise rsync's --delete 
#            option doesn't work properly.
#
# DATE     25.03.2022
# OWNER    Bischofberger
# ==================================================================
# TODO: check if last action was "up" from same machine as now "down"... (accidently overwrite with old version)

source "$HOME/Scripts/f_diskscan"

DEFAULT_DISK="transfer"
DATA_FOLDER="pcsync_data"
EXTRA_FOLDER="pcsync_extra"
STATUSFILE="pcsync-statusfile.txt"
INCLUDEFILE="pcsync-inclexcl.txt"
LOGFILE="pcsync-logfile.txt"
TIMESTAMP="$(date +%d.%m.%Y-%R)"

# default options
DRY=""
FORCE=""

die(){
  echo -e "$0: Error: $1" >&2
  exit 1
}

usage(){
	echo -e "Usage: $0 [OPTION] [up|down]

Syncs stuff from external to internal harddrive and back using rsync.

If the external harddrive is named \"transfer\" it will speed up things a bit.
External harddrive in ext4-format needs user rights after formatting.
It is assumed that all participating users are members of the group "users".

-h, --help          show this help and exit
-n, --dry-run       rsync in dry-run mode
-f, --force         force sync, even if it contradicts direction check
-s, --status        print statusfile and exit
up                  sync up   (from internal to external)
down                sync down (from external to internal)
"
}

# get the external drive and save its path to CHOSEN_DISK
connect_to_remote_disk(){
  if ! f_use_default_disk "$DEFAULT_DISK" ; then
    f_diskscan
  fi

  if [ -z "$CHOSEN_DISK" ] ; then 
    die "no disk found"
  fi
}

# create remote data folder if not existent
# arg1: path of remote folder to be checked
check_remote_folder() {
  if [ -d "$1" ] ; then
    echo "Using existing folder $1"
  else
    echo -n "Folder $1 not existent. Should I create one? [y|n]"
    read answer
    if [[ "$answer" == "y" ]] ; then
      echo "Creating folder $1."
      mkdir -p "$1" || die "could not create folder $1"
    else
      die "Folder $1 must be present to sync."
    fi
  fi
}

load_statusfile(){
  if [ -f "$CHOSEN_DISK/$EXTRA_FOLDER/$STATUSFILE" ] ; then
    echo "Using existing statusfile $CHOSEN_DISK/$EXTRA_FOLDER/$STATUSFILE"
  else
    echo -n "There is no statusfile. Creating one..."
    touch "$CHOSEN_DISK/$EXTRA_FOLDER/$STATUSFILE"
    cat > "$CHOSEN_DISK/$EXTRA_FOLDER/$STATUSFILE" <<'EOF'
# ==================================================================
# FILE     pcsync-statusfile
# MACHINE  all
# INFO     gives extra protection from synching the wrong way
#
# DATE     
# OWNER    Bischofberger
# ==================================================================

# last action:
LAST_RUN="init"
LAST_RUN_FROM="init"
LAST_RUN_TO="init"
LAST_RUN_DATE="init"
EOF
  fi

  source "$CHOSEN_DISK/$EXTRA_FOLDER/$STATUSFILE" || die "failed to load/create $STATUSFILE"

  # do some safety tests here
  if [[ $DIRECTION == up && $LAST_RUN == up && $FORCE != -f ]] ; then
    die "You must sync down since your last sync direction was up.
          Use the \"-f|--force\" option to force direction.
          Use the \"-s|--status\" option to print the statusfile."
  fi
  if [[ $DIRECTION == down && $LAST_RUN == down && $FORCE != -f ]] ; then
    die "You must sync up since your last sync direction was down.
          Use the \"-f|--force\" option to force direction.
          Use the \"-s|--status\" option to print the statusfile."
  fi
  if [[ $DIRECTION == down && $LAST_RUN == up && $LAST_RUN_FROM == $(hostname) && $FORCE != -f ]] ; then
    die "You are trying to sync down to the same machine that was last synced up from.
          This will possibly overwrite current files with older versions from transfer disk.
          Use the \"-f|--force\" option to force direction.
          Use the \"-s|--status\" option to print the statusfile."
  fi
}

# allowed arguments: "up"/"down"
update_statusfile(){
  if [[ "$1" != "up" && "$1" != "down" ]] ; then
    die "unknown direction: $1"
  fi
  sed -i s/^LAST_RUN\=.*/LAST_RUN\="\"$1\""/ "$CHOSEN_DISK/$EXTRA_FOLDER/$STATUSFILE"
  sed -i s/^LAST_RUN_DATE\=.*/LAST_RUN_DATE\="\"$TIMESTAMP\""/ "$CHOSEN_DISK/$EXTRA_FOLDER/$STATUSFILE"
  case "$1" in
    "up")
      sed -i s/^LAST_RUN_FROM\=.*/LAST_RUN_FROM\="\"$(hostname)\""/ "$CHOSEN_DISK/$EXTRA_FOLDER/$STATUSFILE"
      sed -i s/^LAST_RUN_TO\=.*/LAST_RUN_TO\="\"__transfer__\""/ "$CHOSEN_DISK/$EXTRA_FOLDER/$STATUSFILE"
      ;;
    "down")
      sed -i s/^LAST_RUN_TO\=.*/LAST_RUN_TO\="\"$(hostname)\""/ "$CHOSEN_DISK/$EXTRA_FOLDER/$STATUSFILE"
      ;;
  esac
}

print_statusfile(){
  echo "printing statusfile on remote disk..."
  connect_to_remote_disk
  check_remote_folder "$CHOSEN_DISK/$EXTRA_FOLDER"
  if [ -f "$CHOSEN_DISK/$EXTRA_FOLDER/$STATUSFILE" ] ; then
    echo -e "statusfile: $CHOSEN_DISK/$EXTRA_FOLDER/$STATUSFILE\n"
    cat "$CHOSEN_DISK/$EXTRA_FOLDER/$STATUSFILE"
    echo ""
  else
    die "There is no statusfile."
  fi
}

check_includefile() {
  if [ -e "$CHOSEN_DISK/$EXTRA_FOLDER/$INCLUDEFILE" ] ; then
    echo "Using existing includefile $CHOSEN_DISK/$EXTRA_FOLDER/$INCLUDEFILE"
  else
    die "pcsync is a rsync wrapper. Therefore it needs a proper includefile to work.
    Create a file called \"$INCLUDEFILE\" 
    according to the rsync includefile specifications and run pcsync
    again."
  fi
}

timestamp_logfile(){
  echo -e "\n------------------" >> "$CHOSEN_DISK/$EXTRA_FOLDER/$LOGFILE"
  echo "$TIMESTAMP" >> "$CHOSEN_DISK/$EXTRA_FOLDER/$LOGFILE"
}

sync() {
  if [[ $DIRECTION == up ]] ; then
    rsync -av --delete $DRY --include-from="$CHOSEN_DISK/$EXTRA_FOLDER/$INCLUDEFILE" "$HOME/" "$CHOSEN_DISK/$DATA_FOLDER/" 2>&1 | tee -a "$CHOSEN_DISK/$EXTRA_FOLDER/$LOGFILE" || die "rsync error"
  elif [[ $DIRECTION == down ]] ; then
    rsync -av --delete $DRY --include-from="$CHOSEN_DISK/$EXTRA_FOLDER/$INCLUDEFILE" "$CHOSEN_DISK/$DATA_FOLDER/" "$HOME/" 2>&1 | tee -a "$CHOSEN_DISK/$EXTRA_FOLDER/$LOGFILE" || die "rsync error"
  else
    die "direction unknown."
  fi
}



#############################
## main script starts here ##
#############################

DIRECTION=""

# handle options
while [ -n "$1" ]; do
  case "$1" in
    "up")
      DIRECTION=up
      break;;
    "down")
      DIRECTION=down
      break;;
    "-n"|"--dry-run")
      echo "rsync in dry-run mode"
      DRY="-n"
      shift;;
    "-f"|"--force")
      FORCE="-f"
      shift;;
    "-s"|"--status")
      print_statusfile
      exit 0;;
    "-h"|"--help")
      usage
      exit 0;;
    *)
      die "Unknown parameter '$1'. Use the -h|--help flag for more information."
      ;;
  esac
done

# if no argument "up|down" was given, ask for direction
if [[ "$DIRECTION" != up && "$DIRECTION" != down ]] ; then 
  echo -n "Syncup (up) or Syncdown (down)? "
  read answer
  if [[ $answer == up ]] ; then
    DIRECTION=up
  elif [[ $answer == down ]] ; then
    DIRECTION=down
  else
    echo -e "Either answered \"no\" or invalid input."
    exit 1
  fi
fi

connect_to_remote_disk
check_remote_folder "$CHOSEN_DISK/$DATA_FOLDER"
check_remote_folder "$CHOSEN_DISK/$EXTRA_FOLDER"
load_statusfile
check_includefile
timestamp_logfile
sync

# update statusfile
if [[ $DRY != -n ]] ; then
  update_statusfile $DIRECTION
fi

# end of sync
echo "$0: ($DIRECTION) successful"
