#!/bin/bash
# ==================================================================
# FILE     mbsyncsecure
# MACHINE  all
# INFO     runs mbsync periodically with gpg security
#          depends on script "vol"
#
# DATE     03.01.2018
# OWNER    Bischofberger
# ==================================================================

source "$HOME/Scripts/tmuxHelpers"

# variables ========================================================

period=10
period_sec=60
(( "period_sec = 60 * $period" ))

channels="-a"  # channels to be synched by mbsync

# an array of inbox paths
INBOX=("$HOME/Maildir/fastmail/INBOX/new/" \
       "$HOME/Maildir/bmz/INBOX/new/" \
       "$HOME/Maildir/bmz/Erstellungsteam/new/" \
       "$HOME/Maildir/uzh-pseudo/uzh/new/")

UNREAD=()  # number of unread messages before syncing
NEW=()     # number of new messages after syncing
for index in "${!INBOX[@]}"; do
  UNREAD+=(0)
  NEW+=(0)
done


SOUNDFILE=$HOME/Scripts/data/mario1.wav
VOLUME="40"

# functions ========================================================

# helper: print some text into awesome title bar
printMessageToAwesome() {
  echo -e "myemailwidget.text = '$1'" | awesome-client
}

# audio/tmux mail alert
mailAlert() {
  local STAT
  STAT=$(vol --getStat)
  if [[ "$STAT" == "on" ]] ; then  # we only want to play some sound if channel is unmuted
    local VOL
    VOL=$(vol --getVol)  # save current volume
    mplayer -mixer-channel Master -volume "$VOLUME" "$SOUNDFILE" >/dev/null 2>&1  # changes volume to $VOLUME
    vol "$VOL"  # restore volume
  fi
	tmux_DisplayMessageAllClients "You've got mail!"
}

# count messages in $2 and save number in $1
countMessages() {
	local -n ref="$1"  # call by reference
	ref=$(find $2 -type f | wc -l)
}

# count unread messages and compare number to previously set UNREAD[] variables
checkNewMail() {
  for index in "${!INBOX[@]}"; do
    NEW[index]=0 && countMessages NEW[index] "${INBOX[index]}"
  done
}

outputMailStatus() {
  # output some information to console (ATTENTION: adjust array indices manually here!!!)
	echo -e "\\nfastmail new:        ${NEW[0]}"
	echo -e   "bmz new:             ${NEW[1]}/${NEW[2]}"
	echo -e   "uzh new:             ${NEW[3]}"

  # output some information to awesome titlebar
  local AWESOME_INFO=" [${NEW[0]}|${NEW[1]}/${NEW[2]}|${NEW[3]}] "
  printMessageToAwesome "$AWESOME_INFO"

  # audio/tmux mail alert
  for index in "${!NEW[@]}" ; do
    if [[ "${NEW[index]}" -gt 0 && "${NEW[index]}" != "${UNREAD[index]}" ]] ; then
      mailAlert
      break
    fi
  done

  # output time of last sync to console
	echo -n -e "\\nlast sync: "
	date +"%H:%M"
	echo "next sync in $period minutes."

  # output some options
	echo -e "for a quick inbox sync, press \"s\"+[Enter]"
	echo -e "for a complete sync, press [Enter]"
	echo -e "to quit, press \"q\"+[Enter]\\n"
}

# main loop ========================================================

while true
do
	echo "running mbsync..."
  printMessageToAwesome " [running mbsync...] "

	# count unread messages before sync
  for index in "${!INBOX[@]}" ; do
    countMessages UNREAD[index] "${INBOX[index]}"
  done

	# run mbsync
	mbsync -V $channels

	checkNewMail
  outputMailStatus

	# either wait for 15 minutes or check again immediately by pressing Enter
	read -t "$period_sec" input

	# shortcut: only check fastmail inbox, see .mbsyncrc
	if [[ "$input" == s ]] ; then
		channels="fastmail_in"
	else
		channels="-a"
	fi

	# quit script
	if [[ "$input" == q ]] ; then
    printMessageToAwesome " [email] "
		break
	fi
done
