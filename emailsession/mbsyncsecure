#!/bin/bash
# ==================================================================
# FILE     mbsyncsecure
# MACHINE  all
# INFO     runs mbsync periodically with gpg security
#          uses tmux to send a mail alert to all windows
#          also syncs calendars and contacts
# DEPENDS  mbsync, vdirsyncer
#
# DATE     21.06.2019
# OWNER    Bischofberger
# ==================================================================
# IDEA: folder watch (there might never be a good implemenation for this)
#       "while true ; do inotifywait -e move -e create -e delete -r Maildir && mbsync -V -a ; done"

source "$HOME/Scripts/f_tmuxHelpers"

# variables ========================================================

period=10
period_sec=60
(( "period_sec = 60 * $period" ))

# an array of inbox paths
INBOX=("$HOME/Maildir/fastmail/INBOX/new/" \
       "$HOME/Maildir/bmz/INBOX/new/" \
       "$HOME/Maildir/bmz/Erstellungsteam/new/" \
       )

UNREAD=()  # number of unread messages before syncing
NEW=()     # number of new messages after syncing
for index in "${!INBOX[@]}"; do
  UNREAD+=(0)
  NEW+=(0)
done


# functions ========================================================

# helper: print some text into awesome title bar
printMessageToAwesome() {
  echo -e "myemailwidget.text = '$1'" | awesome-client
}

# audio/tmux mail alert
mailAlert() {
	f_tmux_DisplayMessageAllClients "You've got mail!"
}

# count messages in $2 and save number in $1
countMessages() {
	local -n ref="$1"  # call by reference
	ref=$(find $2 -type f | wc -l)
}

# count unread messages and compare number to previously set UNREAD[] variables
checkNewMail() {
  for index in "${!INBOX[@]}"; do
    NEW[index]=0 && countMessages NEW[index] "${INBOX[index]}"
  done
}

outputMailStatus() {
  # output some information to console (ATTENTION: adjust array indices manually here!!!)
	echo -e "\\nFastmail new:         ${NEW[0]}"
	echo -e   "BMZ new:              ${NEW[1]}"
  echo -e "Erstellungsteam new:  ${NEW[2]}"

  # output some information to awesome titlebar
  local AWESOME_INFO=" [${NEW[0]}|${NEW[1]}|${NEW[2]}] "
  printMessageToAwesome "$AWESOME_INFO"

  # audio/tmux mail alert
  for index in "${!NEW[@]}" ; do
    if [[ "${NEW[index]}" -gt 0 && "${NEW[index]}" != "${UNREAD[index]}" ]] ; then
      mailAlert
      break
    fi
  done

  # output time of last sync to console
	echo -n -e "\\nlast sync: "
	date +"%H:%M"
	echo "next sync in $period minutes."

  # output some options
	echo -e "press [Enter] to sync email"
	echo -e "press \"s\"+[Enter] to sync email and contacts/calendars"
	echo -e "press \"q\"+[Enter] to quit"
}

# bring it all together
syncMail() {
	echo -e "\nrunning mbsync..."
  printMessageToAwesome " [running mbsync...] "

	# count unread messages before sync
  for index in "${!INBOX[@]}" ; do
    countMessages UNREAD[index] "${INBOX[index]}"
  done

	# run mbsync
	mbsync -V -a

	checkNewMail
  outputMailStatus
}

# use vdirsyncer to sync contacts and calendars
syncContactsAndCalendars() {
  echo "running vdirsyncer..."
  printMessageToAwesome " [running vdirsyncer...] "
  vdirsyncer sync
}


# main =========================================================================

# sync contacts and calendars only once
syncContactsAndCalendars

while true
do
  syncMail

	# either wait for "$period_sec" or check again immediately by pressing Enter
	read -t "$period_sec" input

  # shortcut: run vdirsyncer sync (contacts and calendars)
	if [[ "$input" == s ]] ; then
    syncContactsAndCalendars
	fi

	# quit script
	if [[ "$input" == q ]] ; then
    printMessageToAwesome " [email] "
		break
	fi
done
