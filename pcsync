#!/bin/bash
# ==================================================================
# FILE     pcsync
# MACHINE  all
# INFO     syncs stuff from external HD to local HD and back, 
#          using rsync
#          - USB stick in ext4-format needs user rights after 
#            formatting: cd /run/media/, login as root with su, 
#            chown -R $(hostname):users $(hostname)
#          - NOTE: It is assumed that all participating users are 
#            members of the group "users", otherwhise rsync's --delete 
#            option doesn't work properly.
#
# DATE     19.05.2014
# OWNER    Bischofberger
# ==================================================================

# TODO 
# - SSH option for sync over network


# variables and paths
#STICK="/mnt/truecrypt1"  # truecrypt mount directory
STICK="/run/media/$(hostname)/syncstick/sync"
STATUSFILE="/run/media/$(hostname)/syncstick/pcsync-statusfile.txt"
INCLUDEFILE="/run/media/$(hostname)/syncstick/pcsync-inclexcl.txt"
DRY=""
FORCE=""


# helper functions
die(){
    echo -e "$0: Error: $1" >&2
    exit 1
}

# just a message
nothing_done(){
    echo -e "\nEither answered \"no\" or invalid input."
    echo "Nothing will be done."
    exit 1
}

create_statusfile(){
    if [ ! -f $STATUSFILE ] ; then
        echo -n "There is no statusfile. Creating one..."
        touch $STATUSFILE
        cat > "$STATUSFILE" <<'EOF'
# ==================================================================
# FILE     pcsync-statusfile
# MACHINE  all
# INFO     gives extra protection from synching the wrong way
#
# DATE     
# OWNER    Bischofberger
# ==================================================================

# last action:
LAST_RUN="init"
EOF
        echo "done."
    fi
}

# allowed arguments: "up"/"down"
update_statusfile(){
    if [ -n "$1" ] ; then
        sed -i s/^LAST_RUN\=.*/LAST_RUN\=$1/ $STATUSFILE  # reset LAST_RUN variable
    fi

}

# handle options
while [ -n "$1" ]; do
    case "$1" in
        "-n"|"--dry-run")
            DRY="-n"
            shift;;
        "-f"|"--force")
            FORCE="-f"
            shift;;
        *)
            echo "usage: $0 [-n|--dry-run] [-f|--force]"
            die "unknown parameter '$1'"
            ;;
    esac
done

if [ ! -e $STICK ] ; then
    die "Please insert stick and rerun program."
fi

# better ask twice...
echo -n "Syncup (up) or Syncdown (down)? "
read answer
if [[ $answer == up ]] ; then
    DIRECTION=up
    unset answer
    echo -n "Do you really want to sync local data to EXTERNAL disk? (y/n) "
	read answer
	if [[ ! $answer == y ]] ; then
        nothing_done
    fi
elif [[ $answer == down ]] ; then
    DIRECTION=down
    unset answer
    echo -n "Do you really want to sync external disk to this LOCAL disk? (y/n) "
	read answer
	if [[ ! $answer == y ]] ; then
        nothing_done
    fi
else
    nothing_done
fi

# extra protection through statusfile
create_statusfile
source $STATUSFILE
if [[ $DIRECTION == up && $LAST_RUN == up && $FORCE != -f ]] ; then
    die "You must sync down since your last sync direction was up.
         Use the \"-f\" option to force direction."
fi
if [[ $DIRECTION == down && $LAST_RUN == down && $FORCE != -f ]] ; then
    die "You must sync up since your last sync direction was down
         Use the \"-f\" option to force direction."
fi

# set correct rights
# NOTE: here, it is assumed that all participating users are member of the group "users",
#       otherwhise rsync's --delete option doesn't work properly.
#if [[ $DRY != -n ]] ; then
#    echo "setting correct rights on $STICK"
#    sudo chown -R $(hostname):users $STICK || die "chown error"  # user handling for rsync --delete
#fi

# sync
if [[ $DIRECTION == up ]] ; then
    rsync -avu $DRY --delete --include-from="$INCLUDEFILE" $HOME/ $STICK/ \
        || die "rsync error"
elif [[ $DIRECTION == down ]] ; then
    rsync -avu $DRY --delete --include-from="$INCLUDEFILE" $STICK/ $HOME/ \
        || die "rsync error"
else
    die "direction unknown."
fi

# update statusfile
if [[ $DRY != -n ]] ; then
    update_statusfile $DIRECTION
fi

# end of sync
echo -e "\npcsync ($DIRECTION) successful"
