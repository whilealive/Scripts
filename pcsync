#!/bin/bash
# ==================================================================
# FILE     pcsync
# MACHINE  all
# INFO     syncs stuff from external HD to local HD and back, 
#          using rsync
#          - USB stick in ext4-format needs user rights after 
#            formatting: cd /run/media/, login as root with su, 
#            chown -R $(hostname):users $(hostname)
#          - NOTE: It is assumed that all participating users are 
#            members of the group "users", otherwhise rsync's --delete 
#            option doesn't work properly.
#
# DATE     01.06.2014
# OWNER    Bischofberger
# ==================================================================

# TODO 
# - SSH option for sync over network


# default paths
REMOTEFOLDER="/run/media/$(hostname)/syncstick/sync"
FILEPATH="/run/media/$(hostname)/syncstick"

# default options
DRY=""
FORCE=""


die(){
    echo -e "$0: Error: $1" >&2
    exit 1
}

# just a message
nothing_done(){
    echo -e "\nEither answered \"no\" or invalid input."
    echo "Nothing will be done."
    exit 1
}

# set $REMOTEFOLDER
remote_sync_folder_input() {
    echo -n "Enter the path of your remote sync folder, or hit <Enter> for default: "
    read -e answer  # -e is for autocompletition

    if [ ! -e $answer ] ; then
        die "Path invalid. Quit without executing."
    fi

    # if last character is a "/", then remove it
    if [[ $answer == */ ]] ; then
        answer="${answer%?}"
    fi

    if [[ $answer != "" ]] ; then
        REMOTEFOLDER=$answer
        echo -e "Your chosen remote sync folder: $REMOTEFOLDER \n"
    else
        echo -e "Default chosen. \"$REMOTEFOLDER\"\n"
    fi
}

# set $FILEPATH
file_path_input() {
    echo -n "Enter a valid path where statusfiles can be found, or hit <Enter> for default: "
    read -e answer  # -e is for autocompletition

    if [ ! -e $answer ] ; then
        die "Path invalid. Quit without executing."
    fi

    # if last character is a "/", then remove it
    if [[ $answer == */ ]] ; then
        answer="${answer%?}"
    fi

    if [[ $answer != "" ]] ; then
        FILEPATH=$answer
        echo -e "Your chosen remote sync folder: $FILEPATH \n"
    else
        echo -e "Default chosen. \"$FILEPATH\"\n"
    fi

    # set file paths
    STATUSFILE="$FILEPATH/pcsync-statusfile.txt"
    INCLUDEFILE="$FILEPATH/pcsync-inclexcl.txt"
}

create_statusfile(){
    if [ ! -f $STATUSFILE ] ; then
        echo -n "There is no statusfile. Creating one..."
        touch $STATUSFILE
        cat > "$STATUSFILE" <<'EOF'
# ==================================================================
# FILE     pcsync-statusfile
# MACHINE  all
# INFO     gives extra protection from synching the wrong way
#
# DATE     
# OWNER    Bischofberger
# ==================================================================

# last action:
LAST_RUN="init"
EOF
        echo "done."
    fi
}

# allowed arguments: "up"/"down"
update_statusfile(){
    if [ -n "$1" ] ; then
        sed -i s/^LAST_RUN\=.*/LAST_RUN\=$1/ $STATUSFILE  # reset LAST_RUN variable
    fi

}




#############################
## main script starts here ##
#############################

# handle options
while [ -n "$1" ]; do
    case "$1" in
        "-n"|"--dry-run")
            DRY="-n"
            shift;;
        "-f"|"--force")
            FORCE="-f"
            shift;;
        *)
            echo "usage: $0 [-n|--dry-run] [-f|--force]"
            die "unknown parameter '$1'"
            ;;
    esac
done

# better ask twice...
echo -n "Syncup (up) or Syncdown (down)? "
read answer
if [[ $answer == up ]] ; then
    DIRECTION=up
#    echo -n "Do you really want to sync local data to EXTERNAL disk? (y/n) "
#	read answer
#	if [[ ! $answer == y ]] ; then
#        nothing_done
#    fi
elif [[ $answer == down ]] ; then
    DIRECTION=down
#    echo -n "Do you really want to sync external disk to this LOCAL disk? (y/n) "
#	read answer
#	if [[ ! $answer == y ]] ; then
#        nothing_done
#    fi
else
    nothing_done
fi

# some info
echo -e "\npcsync needs two working paths:\n\
First of is the remote sync folder. Default is: \"$REMOTEFOLDER\".
In addition, pcsync takes two files to work properly: the includefile for rsync,
and a statusfile for extra protection. They must be at the same place on the remote host.
Therefore we need to give the path of the folder where these can be found in.
Default is \"$FILEPATH\".\n"

# path input
remote_sync_folder_input
file_path_input

# extra protection through statusfile
create_statusfile
source $STATUSFILE
if [[ $DIRECTION == up && $LAST_RUN == up && $FORCE != -f ]] ; then
    die "You must sync down since your last sync direction was up.
         Use the \"-f\" option to force direction."
fi
if [[ $DIRECTION == down && $LAST_RUN == down && $FORCE != -f ]] ; then
    die "You must sync up since your last sync direction was down
         Use the \"-f\" option to force direction."
fi

# sync
if [[ $DIRECTION == up ]] ; then
    rsync -avu $DRY --delete --include-from="$INCLUDEFILE" $HOME/ $REMOTEFOLDER/ \
        || die "rsync error"
elif [[ $DIRECTION == down ]] ; then
    rsync -avu $DRY --delete --include-from="$INCLUDEFILE" $REMOTEFOLDER/ $HOME/ \
        || die "rsync error"
else
    die "direction unknown."
fi

# update statusfile
if [[ $DRY != -n ]] ; then
    update_statusfile $DIRECTION
fi

# end of sync
echo -e "\npcsync ($DIRECTION) successful"
